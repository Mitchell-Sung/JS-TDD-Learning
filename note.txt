# Test-Driven Development
Writing tests for your production code before you actually write the 
production code.

# Things to keep in mind
  01. The goal of test-driven development is code quality.
  02. There are good and bad tests.
  03. There are many different opinions about the right way to do TDD.

# Advantages of TDD
  01. TDD forces us to clarify our thinking.
  02. TDD improves communication between developers.
  03. TDD improves the structure of our production code.
  04. Allows developers to make worry-free changes.

# Disadvantages of TDD
  01. TDD takes longer at first.
      - The most common complaint that people have when it comes to TDD is 
        it takes a lot more time than just writing code without tests.
  02. TDD is not always a favorite with management.
  03. Beware of writing bad tests!

# The basic TDD Cycle
  - write a failing test.
  - Refactor the code you wrote.
  - Write production code to make the test pass.

# Criteria for a good test
  - Readable
  - Isolated (단독적인, 의존적이지 않은)
  - Thorough (빈틈없는, 철두철미한)
  - Explicit (분명한, 명쾌한)

# The three different types of tests 
  - Unit Tests
    Test very specific, low-level pieces of functionality. 
  - Integration Tests
    Ensure that the individual pieces of your application work together 
    correctly.
  - End-to-End (E2E) Tests
    Ensure your entire application works as seen from the viewpoint of a user.

-------------------------------------------------------------------------------

< WRITING UNIT TESTS >

# Using Mocha and Chai Libreraies

# install npm
  $ npm init -y

# install Mocah and Chai
  $ npm install --save-dev mocha chai
  $ npm install --save-dev chai

# install Babel
  $ npm install --save-dev @babel/core
  $ npm install --save-dev @babel/preset-env
  $ npm install --save-dev @babel/register